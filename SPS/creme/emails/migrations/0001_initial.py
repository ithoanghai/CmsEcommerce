# Generated by Django 4.2.6 on 2023-10-13 14:33

import creme.creme_core.models.fields
import creme.documents.models.fields
import creme.emails.core.validators
import creme.emails.utils
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("creme_core", "0002_initial"),
        ("documents", "0001_initial"),
        ("contenttypes", "0002_remove_content_type_name"),
    ]

    operations = [
        migrations.CreateModel(
            name="EmailCampaign",
            fields=[
                (
                    "cremeentity_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="creme_core.cremeentity",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=100, verbose_name="Name of the campaign"
                    ),
                ),
            ],
            options={
                "verbose_name": "Emailing campaign",
                "verbose_name_plural": "Emailing campaigns",
                "ordering": ("name",),
                "abstract": False,
                "swappable": "EMAILS_CAMPAIGN_MODEL",
            },
            bases=("creme_core.cremeentity",),
        ),
        migrations.CreateModel(
            name="EmailTemplate",
            fields=[
                (
                    "cremeentity_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="creme_core.cremeentity",
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Name")),
                ("subject", models.CharField(max_length=100, verbose_name="Subject")),
                (
                    "body",
                    models.TextField(
                        help_text="You can use variables: {{last_name}} {{first_name}} {{civility}} {{name}}",
                        validators=[
                            creme.emails.core.validators.TemplateVariablesValidator(
                                allowed_variables=(
                                    "last_name",
                                    "first_name",
                                    "civility",
                                    "name",
                                )
                            )
                        ],
                        verbose_name="Body",
                    ),
                ),
                (
                    "body_html",
                    creme.creme_core.models.fields.UnsafeHTMLField(
                        blank=True,
                        help_text="You can use variables: {{last_name}} {{first_name}} {{civility}} {{name}}",
                        validators=[
                            creme.emails.core.validators.TemplateVariablesValidator(
                                allowed_variables=(
                                    "last_name",
                                    "first_name",
                                    "civility",
                                    "name",
                                )
                            )
                        ],
                        verbose_name="Body (HTML)",
                    ),
                ),
            ],
            options={
                "verbose_name": "Email template",
                "verbose_name_plural": "Email templates",
                "ordering": ("name",),
                "abstract": False,
                "swappable": "EMAILS_TEMPLATE_MODEL",
            },
            bases=("creme_core.cremeentity",),
        ),
        migrations.CreateModel(
            name="EntityEmail",
            fields=[
                (
                    "cremeentity_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="creme_core.cremeentity",
                    ),
                ),
                (
                    "reads",
                    models.PositiveIntegerField(
                        default=0,
                        editable=False,
                        null=True,
                        verbose_name="Number of reads",
                    ),
                ),
                (
                    "status",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (1, "Sent"),
                            (2, "Not sent"),
                            (3, "Sending error"),
                            (4, "Synchronized"),
                        ],
                        default=2,
                        editable=False,
                        verbose_name="Status",
                    ),
                ),
                ("sender", models.CharField(max_length=100, verbose_name="Sender")),
                (
                    "subject",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Subject"
                    ),
                ),
                (
                    "recipient",
                    models.CharField(max_length=100, verbose_name="Recipient"),
                ),
                ("body", models.TextField(verbose_name="Body")),
                (
                    "sending_date",
                    models.DateTimeField(
                        editable=False, null=True, verbose_name="Sending date"
                    ),
                ),
                (
                    "reception_date",
                    models.DateTimeField(
                        editable=False, null=True, verbose_name="Reception date"
                    ),
                ),
                (
                    "identifier",
                    models.CharField(
                        default=creme.emails.utils.generate_id,
                        editable=False,
                        max_length=32,
                        unique=True,
                        verbose_name="Email ID",
                    ),
                ),
                (
                    "body_html",
                    creme.creme_core.models.fields.UnsafeHTMLField(
                        verbose_name="Body (HTML)"
                    ),
                ),
            ],
            options={
                "verbose_name": "Email",
                "verbose_name_plural": "Emails",
                "ordering": ("-sending_date",),
                "abstract": False,
                "swappable": "EMAILS_EMAIL_MODEL",
            },
            bases=("creme_core.cremeentity", models.Model),
        ),
        migrations.CreateModel(
            name="MailingList",
            fields=[
                (
                    "cremeentity_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="creme_core.cremeentity",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=80, verbose_name="Name of the mailing list"
                    ),
                ),
                (
                    "children",
                    models.ManyToManyField(
                        editable=False,
                        related_name="parents_set",
                        to=settings.EMAILS_MLIST_MODEL,
                        verbose_name="Child mailing lists",
                    ),
                ),
            ],
            options={
                "verbose_name": "Mailing list",
                "verbose_name_plural": "Mailing lists",
                "ordering": ("name",),
                "abstract": False,
                "swappable": "EMAILS_MLIST_MODEL",
            },
            bases=("creme_core.cremeentity",),
        ),
        migrations.CreateModel(
            name="Email",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("from_email", models.EmailField(max_length=200)),
                ("to_email", models.EmailField(max_length=200)),
                ("subject", models.CharField(max_length=200)),
                ("message", models.CharField(max_length=200)),
                ("file", models.FileField(null=True, upload_to="files/")),
                ("send_time", models.DateTimeField(auto_now=True)),
                ("status", models.CharField(default="sent", max_length=200)),
                ("important", models.BooleanField(default=False, max_length=10)),
            ],
            options={
                "ordering": ["-id"],
            },
        ),
        migrations.CreateModel(
            name="EmailSending",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sender",
                    models.EmailField(max_length=100, verbose_name="Sender address"),
                ),
                (
                    "type",
                    models.PositiveSmallIntegerField(
                        choices=[(1, "Immediate"), (2, "Deferred")],
                        default=1,
                        verbose_name="Sending type",
                    ),
                ),
                ("sending_date", models.DateTimeField(verbose_name="Sending date")),
                (
                    "state",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (1, "Done"),
                            (2, "In progress"),
                            (3, "Planned"),
                            (4, "Error during sending"),
                        ],
                        default=3,
                        editable=False,
                        verbose_name="Sending state",
                    ),
                ),
                (
                    "subject",
                    models.CharField(
                        editable=False, max_length=100, verbose_name="Subject"
                    ),
                ),
                ("body", models.TextField(editable=False, verbose_name="Body")),
                (
                    "body_html",
                    models.TextField(
                        editable=False, null=True, verbose_name="Body (HTML)"
                    ),
                ),
                (
                    "attachments",
                    models.ManyToManyField(
                        editable=False,
                        to="documents.document",
                        verbose_name="Attachments",
                    ),
                ),
                (
                    "campaign",
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sendings_set",
                        to=settings.EMAILS_CAMPAIGN_MODEL,
                        verbose_name="Related campaign",
                    ),
                ),
            ],
            options={
                "verbose_name": "Email campaign sending",
                "verbose_name_plural": "Email campaign sendings",
            },
        ),
        migrations.CreateModel(
            name="EmailSendingConfigItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name displayed to users when selecting a configuration",
                        max_length=100,
                        unique=True,
                        verbose_name="Name",
                    ),
                ),
                (
                    "host",
                    models.CharField(
                        help_text="Eg: smtp.mydomain.org",
                        max_length=100,
                        verbose_name="Server URL",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        blank=True,
                        help_text="Eg: me@mydomain.org",
                        max_length=254,
                        verbose_name="Username",
                    ),
                ),
                (
                    "encoded_password",
                    models.CharField(
                        editable=False, max_length=128, verbose_name="Password"
                    ),
                ),
                (
                    "port",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Leave empty to use the default port",
                        null=True,
                        verbose_name="Port",
                    ),
                ),
                ("use_tls", models.BooleanField(default=True, verbose_name="Use TLS")),
                (
                    "default_sender",
                    models.EmailField(
                        blank=True,
                        help_text="If you fill this field with an email address, this address will be used as the default value in the form for the field «Sender» when sending a campaign.",
                        max_length=254,
                        verbose_name="Default sender",
                    ),
                ),
            ],
            options={
                "verbose_name": "SMTP configuration",
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="EmailToSync",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("subject", models.CharField(max_length=100, verbose_name="Subject")),
                ("body", models.TextField(verbose_name="Body")),
                (
                    "body_html",
                    creme.creme_core.models.fields.UnsafeHTMLField(
                        verbose_name="Body (HTML)"
                    ),
                ),
                (
                    "date",
                    models.DateTimeField(
                        editable=False, null=True, verbose_name="Reception date"
                    ),
                ),
                (
                    "attachments",
                    models.ManyToManyField(
                        to="creme_core.fileref", verbose_name="Attachments"
                    ),
                ),
                (
                    "user",
                    creme.creme_core.models.fields.CremeUserForeignKey(
                        to=settings.AUTH_USER_MODEL, verbose_name="Owner"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="LightWeightEmail",
            fields=[
                (
                    "reads",
                    models.PositiveIntegerField(
                        default=0,
                        editable=False,
                        null=True,
                        verbose_name="Number of reads",
                    ),
                ),
                (
                    "status",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (1, "Sent"),
                            (2, "Not sent"),
                            (3, "Sending error"),
                            (4, "Synchronized"),
                        ],
                        default=2,
                        editable=False,
                        verbose_name="Status",
                    ),
                ),
                ("sender", models.CharField(max_length=100, verbose_name="Sender")),
                (
                    "subject",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Subject"
                    ),
                ),
                (
                    "recipient",
                    models.CharField(max_length=100, verbose_name="Recipient"),
                ),
                ("body", models.TextField(verbose_name="Body")),
                (
                    "sending_date",
                    models.DateTimeField(
                        editable=False, null=True, verbose_name="Sending date"
                    ),
                ),
                (
                    "reception_date",
                    models.DateTimeField(
                        editable=False, null=True, verbose_name="Reception date"
                    ),
                ),
                (
                    "id",
                    models.CharField(
                        editable=False,
                        max_length=32,
                        primary_key=True,
                        serialize=False,
                        verbose_name="Email ID",
                    ),
                ),
                (
                    "recipient_ctype",
                    creme.creme_core.models.fields.EntityCTypeForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "recipient_entity",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="received_lw_mails",
                        to="creme_core.cremeentity",
                    ),
                ),
                (
                    "sending",
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="mails_set",
                        to="emails.emailsending",
                        verbose_name="Related sending",
                    ),
                ),
            ],
            options={
                "verbose_name": "Email of campaign",
                "verbose_name_plural": "Emails of campaign",
            },
        ),
        migrations.CreateModel(
            name="EmailToSyncPerson",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.PositiveSmallIntegerField(
                        choices=[(1, "Sender"), (2, "Recipient")],
                        default=2,
                        editable=False,
                    ),
                ),
                ("email", models.EmailField(editable=False, max_length=254)),
                ("is_main", models.BooleanField(default=False, editable=False)),
                (
                    "email_to_sync",
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="related_persons",
                        to="emails.emailtosync",
                    ),
                ),
                (
                    "entity",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="creme_core.cremeentity",
                    ),
                ),
                (
                    "entity_ctype",
                    creme.creme_core.models.fields.EntityCTypeForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            options={
                "verbose_name": "Sender/recipient to synchronize",
                "verbose_name_plural": "Senders/recipients to synchronize",
            },
        ),
        migrations.CreateModel(
            name="EmailSyncConfigItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.PositiveSmallIntegerField(
                        choices=[(1, "POP"), (2, "IMAP")], default=1
                    ),
                ),
                (
                    "host",
                    models.CharField(
                        help_text="Eg: pop.mydomain.org",
                        max_length=100,
                        verbose_name="Server URL",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        help_text="Eg: me@mydomain.org",
                        max_length=254,
                        verbose_name="Username",
                    ),
                ),
                (
                    "encoded_password",
                    models.CharField(
                        editable=False, max_length=128, verbose_name="Password"
                    ),
                ),
                (
                    "port",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Leave empty to use the default port",
                        null=True,
                        verbose_name="Port",
                    ),
                ),
                ("use_ssl", models.BooleanField(default=True, verbose_name="Use SSL")),
                (
                    "keep_attachments",
                    models.BooleanField(
                        default=True,
                        help_text="Attachments are converted to real Documents when the email is accepted.",
                        verbose_name="Keep the attachments",
                    ),
                ),
                (
                    "default_user",
                    creme.creme_core.models.fields.CremeUserForeignKey(
                        blank=True,
                        help_text='If no user corresponding to an email address is found (in the fields "From", "To", "CC" or "BCC") to be the owner of the email, this user is used as default one.\nBeware: if *No default user* is selected, emails with no address related to a user are just dropped.',
                        null=True,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Default owner",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EmailSignature",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The name is only used to select the signature you want to use (in an email or an email template), it is not display in the email's body.",
                        max_length=100,
                        verbose_name="Name",
                    ),
                ),
                ("body", models.TextField(verbose_name="Body")),
                (
                    "images",
                    creme.documents.models.fields.ImageEntityManyToManyField(
                        blank=True,
                        help_text="Images embedded in emails (but not as attached).",
                        to="documents.document",
                        verbose_name="Images",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "verbose_name": "Email signature",
                "verbose_name_plural": "Email signatures",
                "ordering": ("name",),
            },
        ),
        migrations.AddField(
            model_name="emailsending",
            name="config_item",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="emails.emailsendingconfigitem",
                verbose_name="SMTP server",
            ),
        ),
        migrations.AddField(
            model_name="emailsending",
            name="signature",
            field=models.ForeignKey(
                editable=False,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="emails.emailsignature",
                verbose_name="Signature",
            ),
        ),
        migrations.CreateModel(
            name="EmailRecipient",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "address",
                    models.CharField(max_length=100, verbose_name="Email address"),
                ),
                (
                    "ml",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.EMAILS_MLIST_MODEL,
                        verbose_name="Related mailing list",
                    ),
                ),
            ],
            options={
                "verbose_name": "Recipient",
                "verbose_name_plural": "Recipients",
                "ordering": ("address",),
            },
        ),
    ]
